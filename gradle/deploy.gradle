apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    //archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    excludes = ['**/*.kt'] // Exclude all kotlin files from javadoc file.
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    archiveClassifier.set('javadoc')
//    from androidJavadocs.destinationDir
//}
//
//artifacts {
//    archives androidSourcesJar
//    archives androidJavadocsJar
//}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // Adds Javadocs and Sources as separate jars.
                artifact androidSourcesJar
                //artifact androidJavadocsJar

                // You can then customize attributes of the publication as shown below.
                groupId = rootProject.group
                artifactId = project.artifactId
                version = rootProject.version

                pom {
                    name = project.artifactName
                    packaging = 'aar'
                    description = project.artifactDescription
                    url = POM_URL

                    licenses {
                        license {
                            name = "The MIT License"
                            url = 'https://raw.githubusercontent.com/virtusize/integration_android/master/LICENSE'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'virtusize'
                            name = 'Virtusize'
                        }
                    }

                    scm {
                        connection = 'scm:git@github.com/virtusize/integration_android.git'
                        developerConnection = 'scm:git@github.com/virtusize/integration_android.git'
                        url = POM_URL
                    }

                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = localProperties('OSSRH_USERNAME')
                    password = localProperties('OSSRH_PASSWORD')
                }
            }
        }
    }

    def shouldSign = !localProperties('GPG_KEY_ID').isEmpty()
            && !localProperties('GPG_KEY').isEmpty()
            && !localProperties('GPG_KEY_PASSWORD').isEmpty()

    signing {
        required { shouldSign && gradle.taskGraph.hasTask("publish") }
        if (shouldSign) {
            useInMemoryPgpKeys(
                    localProperties('GPG_KEY_ID'),
                    localProperties('GPG_KEY'),
                    localProperties('GPG_KEY_PASSWORD')
            )
        }
        sign publishing.publications.release
    }
}